{"ast":null,"code":"import React,{useState}from'react';import'../CSS/MCQPage.css';// Add necessary styles\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MCQPage=()=>{const[questions,setQuestions]=useState([]);// set question\nconst[error,setError]=useState(null);// set error\nconst[numQuestions,setNumQuestions]=useState('');// set number of question to generate\nconst[subject,setSubject]=useState('');// set subject for chatbot\nconst[tone,setTone]=useState('');// set tone for chatbot\nconst[selectedOptions,setSelectedOptions]=useState({});// set select option\nconst[feedbacks,setFeedbacks]=useState({});// set feedback after each option\nconst[colors,setColors]=useState({});// set color for text\nconst[isLoading,setIsLoading]=useState(false);// manage loading\nconst handleResponse=data=>{const formattedQuestions=Object.values(data).map(q=>({question:q.mcq,options:Object.entries(q.options).map(_ref=>{let[key,value]=_ref;return{key,value};}),correct:q.correct}));setQuestions(formattedQuestions);};const handleFetchQuestion=()=>{setIsLoading(true);// Start loading\nfetch('https://websitechatbotbackend.onrender.com/question',{method:\"POST\",headers:{'Content-type':'application/json'},body:JSON.stringify({numQuestions,subject,tone})}).then(response=>{if(!response.ok){throw new Error(\"network response not ok\");}return response.json();}).then(data=>{handleResponse(data);setIsLoading(false);// Stop loading after response\n}).catch(error=>{setError(error.message);console.log(\"Error fetching question: \",error);setIsLoading(false);// Stop loading in case of error\n});};const handleKeyPress=event=>{if(event.key==='Enter'){console.log(\"enter key is press\");event.preventDefault();handleFetchQuestion();}};const handleOptionClick=(questionIndex,optionKey,correctAnswer)=>{setSelectedOptions(prev=>({...prev,[questionIndex]:optionKey}));if(optionKey===correctAnswer){setColors(prev=>({...prev,[questionIndex]:'green'}));// Reset color after 1 seconds\nsetTimeout(()=>{setColors(prev=>({...prev,[questionIndex]:'black'}));},1000);}else{setColors(prev=>({...prev,[questionIndex]:'red'}));setTimeout(()=>{setColors(prev=>({...prev,[questionIndex]:'black'}));},1000);}setFeedbacks(prev=>({...prev,[questionIndex]:optionKey===correctAnswer?\"Correct!\":\"It is not correct!\"}));};return/*#__PURE__*/_jsxs(\"form\",{className:\"mcq-form\",onKeyDown:handleKeyPress,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"numQuestions\",children:\"Number of Questions:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"numQuestions\",value:numQuestions,onChange:e=>setNumQuestions(e.target.value),placeholder:\"Enter number of questions\",className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"subject\",children:\"Subject:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"subject\",value:subject,onChange:e=>setSubject(e.target.value),placeholder:\"Enter subject of questions\",className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"tone\",children:\"level:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"tone\",value:tone,onChange:e=>setTone(e.target.value),placeholder:\"Enter level of questions\",className:\"input-field\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleFetchQuestion,className:\"fetch-btn\",children:\"Fetch Questions\"}),isLoading?/*#__PURE__*/_jsxs(\"div\",{className:\"loading\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Loading questions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"dot-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"dot\"}),/*#__PURE__*/_jsx(\"div\",{className:\"dot\"}),/*#__PURE__*/_jsx(\"div\",{className:\"dot\"})]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"questions-container\",children:questions.map((q,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"question-block\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[index+1,\") \",q.question]}),/*#__PURE__*/_jsx(\"div\",{className:\"options-container\",children:q.options.map(option=>/*#__PURE__*/_jsxs(\"label\",{className:\"option-label\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:`question-${index}`,value:option.key,onClick:()=>handleOptionClick(index,option.key,q.correct),className:\"option-input\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:selectedOptions[index]===option.key?colors[index]:'black'},children:option.value})]},option.key))}),selectedOptions[index]&&/*#__PURE__*/_jsxs(\"p\",{className:\"feedback\",children:[\"Feedback: \",feedbacks[index]]})]},index))})]});};export default MCQPage;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","MCQPage","questions","setQuestions","error","setError","numQuestions","setNumQuestions","subject","setSubject","tone","setTone","selectedOptions","setSelectedOptions","feedbacks","setFeedbacks","colors","setColors","isLoading","setIsLoading","handleResponse","data","formattedQuestions","Object","values","map","q","question","mcq","options","entries","_ref","key","value","correct","handleFetchQuestion","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","catch","message","console","log","handleKeyPress","event","preventDefault","handleOptionClick","questionIndex","optionKey","correctAnswer","prev","setTimeout","className","onKeyDown","children","htmlFor","type","id","onChange","e","target","placeholder","onClick","index","option","name","style","color"],"sources":["C:/Users/ASUS/OneDrive/Documents/HeyHiJob/Website/client/src/page/MCQPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../CSS/MCQPage.css'; // Add necessary styles\r\n\r\nconst MCQPage = () => {\r\n  const [questions, setQuestions] = useState([]); // set question\r\n  const [error, setError] = useState(null); // set error\r\n  const [numQuestions, setNumQuestions] = useState(''); // set number of question to generate\r\n  const [subject, setSubject] = useState(''); // set subject for chatbot\r\n  const [tone, setTone] = useState(''); // set tone for chatbot\r\n  const [selectedOptions, setSelectedOptions] = useState({}); // set select option\r\n  const [feedbacks, setFeedbacks] = useState({}); // set feedback after each option\r\n  const [colors, setColors] = useState({}); // set color for text\r\n  const [isLoading, setIsLoading] = useState(false); // manage loading\r\n\r\n  const handleResponse = (data) => {\r\n    const formattedQuestions = Object.values(data).map(q => ({\r\n      question: q.mcq,\r\n      options: Object.entries(q.options).map(([key, value]) => ({\r\n        key,\r\n        value\r\n      })),\r\n      correct: q.correct\r\n    }));\r\n    setQuestions(formattedQuestions);\r\n  };\r\n\r\n  const handleFetchQuestion = () => {\r\n    setIsLoading(true); // Start loading\r\n    fetch('https://websitechatbotbackend.onrender.com/question', {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        numQuestions,\r\n        subject,\r\n        tone,\r\n      }),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(\"network response not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        handleResponse(data);\r\n        setIsLoading(false); // Stop loading after response\r\n      })\r\n      .catch(error => {\r\n        setError(error.message);\r\n        console.log(\"Error fetching question: \", error);\r\n        setIsLoading(false); // Stop loading in case of error\r\n      });\r\n  };\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      console.log(\"enter key is press\")\r\n      event.preventDefault();\r\n      handleFetchQuestion()\r\n    }\r\n  }\r\n  const handleOptionClick = (questionIndex, optionKey, correctAnswer) => {\r\n    setSelectedOptions(prev => ({\r\n      ...prev,\r\n      [questionIndex]: optionKey\r\n    }));\r\n\r\n    if (optionKey === correctAnswer) {\r\n      setColors(prev => ({\r\n        ...prev,\r\n        [questionIndex]: 'green'\r\n      }));\r\n\r\n      // Reset color after 1 seconds\r\n      setTimeout(() => {\r\n        setColors(prev => ({\r\n          ...prev,\r\n          [questionIndex]: 'black'\r\n        }));\r\n      }, 1000);\r\n    } else {\r\n      setColors(prev => ({\r\n        ...prev,\r\n        [questionIndex]: 'red'\r\n      }));\r\n\r\n      setTimeout(() => {\r\n        setColors(prev => ({\r\n          ...prev, [questionIndex]: 'black'\r\n        }));\r\n      }, 1000);\r\n    }\r\n\r\n    setFeedbacks(prev => ({\r\n      ...prev,\r\n      [questionIndex]: optionKey === correctAnswer ? \"Correct!\" : \"It is not correct!\"\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <form className=\"mcq-form\" onKeyDown={handleKeyPress}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"numQuestions\">Number of Questions:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"numQuestions\"\r\n          value={numQuestions}\r\n          onChange={(e) => setNumQuestions(e.target.value)}\r\n          placeholder='Enter number of questions'\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"subject\">Subject:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          placeholder='Enter subject of questions'\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"tone\">level:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"tone\"\r\n          value={tone}\r\n          onChange={(e) => setTone(e.target.value)}\r\n          placeholder='Enter level of questions'\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <button type=\"button\" onClick={handleFetchQuestion} className=\"fetch-btn\">Fetch Questions</button>\r\n\r\n     \r\n\r\n      {isLoading ? (\r\n        <div className=\"loading\">\r\n          <p>Loading questions</p>\r\n          <div className=\"dot-container\">\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"questions-container\">\r\n          {questions.map((q, index) => (\r\n            <div key={index} className=\"question-block\">\r\n              <h3>{index + 1}) {q.question}</h3>\r\n              <div className=\"options-container\">\r\n                {q.options.map(option => (\r\n                  <label key={option.key} className=\"option-label\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={`question-${index}`}\r\n                      value={option.key}\r\n                      onClick={() => handleOptionClick(index, option.key, q.correct)}\r\n                      className=\"option-input\"\r\n                    />\r\n                    <span style={{ color: selectedOptions[index] === option.key ? colors[index] : 'black' }}>\r\n                      {option.value}\r\n                    </span>\r\n                  </label>\r\n                ))}\r\n              </div>\r\n              {selectedOptions[index] && (\r\n                <p className=\"feedback\">Feedback: {feedbacks[index]}</p>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MCQPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}